"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const os_1 = require("os");
const pidFromPort = require("pid-from-port");
class Killer {
    constructor(ports, options) {
        this.ports = ports;
        this.options = options;
    }
    kill() {
        return __awaiter(this, void 0, void 0, function* () {
            const killFunc = os_1.platform() === 'win32' ? this.win32Kill : this.unixKill;
            const promises = this.ports.map(killFunc);
            return Promise.all(promises);
        });
    }
    win32Kill(port) {
        return __awaiter(this, void 0, void 0, function* () {
            const pid = yield pidFromPort(port);
            return new Promise((resolve, reject) => {
                child_process_1.exec(`TASKKILL /f /t /pid ${pid}`, (err, stdout, stderr) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    stderr && console.log(stderr);
                    stdout && console.log(stdout);
                    resolve();
                });
            });
        });
    }
    unixKill(port) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                child_process_1.exec(`lsof -i tcp:${port} | grep LISTEN | awk '{print $2}' | xargs kill -9`, (err, stdout, stderr) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    stderr && console.log(stderr);
                    stdout && console.log(stdout);
                    resolve();
                });
            });
        });
    }
}
exports.Killer = Killer;
